###################################################### Condições, repetições e sequências ###################################################

#Primeiro Script (variáveis de ambiente - pwd, whoami, date etc)
echo "Meu diretório atual: $(pwd)"
Write-Host "Meu usuário atual: $(whoami)"

#salve esse scrip com name.psi
#get-comand é utilizado para listar todos os comando do powershell
#select-string é o grep do powershell: get-comando | Select-string "Flush-volume "
#get-help mostra as funcionalidades de um comenado: get-hel test-netconnection

_____________________________________________________________________________________________________________________________________________

#Segundo script (requisitando inserção de um parametro $ip)
$ip = Read-Host "Digite o IP"
echo "Efetuando ping no host: $ip"
ping -n 1 $ip
_____________________________________________________________________________________________________________________________________________

#Terceiro script (filtrando o resultado com Select-String)
$ip = Read-Host "Digite o IP"
echo "Efetuando ping no host: $ip"
ping -n 1 $ip | Select-String "bytes=32"
#obs: Sempre quando o ping encontra o destino, no meio do log de resposta, vem bytes=32. Logo, vamos filtrar pra mostrar somente as linhas
#que tem "bytes=32".
_____________________________________________________________________________________________________________________________________________

#Quarto script (requisitando inserção de varios parametros $ip, $port, $path etc)
param ($ip, $port)
echo "Efetuando ping no host: $ip"
ping -n 1 $ip | Select-String "bytes=32"
#Para executar este script, deverá seguir o exemplo: .\script.ps1 192.168.0.15 8080
_____________________________________________________________________________________________________________________________________________

#Quinto script (requisitando inserção de varios parametros $ip, $port, $path etc)
param ($ip)
if (!$ip) {
  echo "Exemplo para funcionar: .\script.ps1 192.168.0.10"
} else{
  echo "Efetuando ping no host: $ip"
ping -n 1 $ip | Select-String "bytes=32"
}
#Para executar este script, deverá seguir o exemplo: .\script.ps1 192.168.0.15 8080

o###################################################### Condições, repetições e sequências ###################################################
#Sexto script (Utilizando operadores lógicos)

$idade = Read-Host "Qual a idade?
if ($idade -ge "18") {
  echo "Pode dirigir"
} else{ 
  echo "Não pode dirigir"
}
#obs: Os operadores são aritméticos, lógicos e relacionais.
_____________________________________________________________________________________________________________________________________________

#Sétimo script (Utilizando foreach)
#Exemplo: foreach ($var1 in 1..10) {echo "192.168.0.$var1"}
#O resultado seria imprimir 192.168.0.1 até o 10, ficando endereço ip um abaixo do outro.

param ($p1)
if (!$p1) {
  echo "Exemplo para funcionar: .\script.ps1 192.168.0.10"
} else{
foreach ($p2 in 1..10){
ping -n 1 $p1 | Select-String "bytes=32"
}
}
#param é usado para declarar parâmetros em scripts ou funções PowerShell. Os parâmetros são valores que podem ser passados para um script
# ou função quando são chamados.
#foreach é usado para iterar por uma coleção de itens, como uma matriz (array) ou uma lista. 

_____________________________________________________________________________________________________________________________________________

#Oitavo script (
#Exemplo: foreach ($var1 in 1..10) {echo "192.168.0.$var1"}
#O resultado seria imprimir 192.168.0.1 até o 10, ficando endereço ip um abaixo do outro.

param ($p1)
if (!$p1) {
  echo "Exemplo para funcionar: .\script.ps1 192.168.0.10"
} else{
foreach ($p2 in 1..10){
$try {resp = ping -n 1 $p1 | Select-String "bytes=32"
$resp.Line.split(' ')[2] -replace ":",""
} catch {}
}
}

#Utilizando o resp.line.splica para filtrar os resultados, assim como se utiliza o cut no bash.
#O try e o catché para tratar os erros que aparecem

_____________________________________________________________________________________________________________________________________________

#Nono script ( Port scan limitado a um ip e ao range de portas dentro do script)


param ($ip)
if (!$ip) { #Pode utilizar -not ou ! para dizer que caso não seja digitado o ip, faça imprima na tela echo...
    Write-Host "Exemplo de uso: .\script.ps1 -ip 192.168.0.10"
} else {
$portas = 21,22,3306,80,443 # Define um range de portas (80 .. 100, por exemplo)
foreach ($porta in $portas) {
if (Test-NetConnection $ip -Port $porta -WarningAction SilentlyContinue -InformationLevel Quiet) {
    Write-Host "Porta $porta Aberta"
} else {
   Write-Host "Porta $porta Fechada"
}
}
}
_____________________________________________________________________________________________________________________________________________

#Décimo script ( Port scan - limitado a um ip e a uma porta)

param ($int, $porta)
if (-not $ip -or -not $porta) {
    echo "Exemplo de uso: .\script.ps1 -ip 192.168.0.10 -porta 80"
} else {
    try {
        $resultadoTeste = Test-NetConnection -ComputerName $ip -Port $porta -WarningAction Stop
        echo "Porta $porta Aberta"
    } catch {
        echo "Porta $porta Fechada"
    }
}

_____________________________________________________________________________________________________________________________________________

#Décimo primeiro script ( Parsing site)

#Décimo primeiro script ( Parsing site)

$site = Read-Host "Digite o site"
$web = Invoke-WebRequest -uri "$site" -Method Options
echo "O servidor roda: "
$web.headers.server
echo " "
echo "O servidor aceita os métodos: "
$web.headers.allow
echo "Links encontrados: "
$web2 = Invoke-WebRequest -uri "$site"
$web2.links.href | Select-String http://


#O servidor roda: Apache/2.2.22 (Debian)
#O servidor aceita os métodos: GET,HEAD,POST,OPTIONS
#inks encontrados: 
#http://37.59.174.233:8080
#http://intranet.businesscorp.com.br
#http://mail.businesscorp.com.br
#http://parsingok.businesscorp.com.br
#http://srvkey.businesscorp.com.br
#http://rh.businesscorp.com.br
#http://www.styleshout.com/

